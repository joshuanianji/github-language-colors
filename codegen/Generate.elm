module Generate exposing (main)

{-| -}

import Elm
import Elm.Annotation as Type
import Flags exposing (Flag, FlagColor, WithName, WithProcessed)
import Gen.CodeGen.Generate as Generate
import Gen.Color
import Gen.Element
import Json.Decode exposing (Value)
import Util


main : Program Value () ()
main =
    Generate.fromJson Flags.decoder generate


generate : Flag -> List Elm.File
generate files =
    let
        colorTypeDeclaration =
            Elm.alias "Color" colorType
                |> Elm.exposeWith
                    { exposeConstructor = False
                    , group = Just "Color Type"
                    }
                |> Elm.withDocumentation
                    """Each color exposes the following fields:
- `elmui` - The color as an [elm-ui](https://package.elm-lang.org/packages/mdgriffith/elm-ui/latest/) `Element.Color`
- `color` - The color as an [elm-color](https://package.elm-lang.org/packages/avh4/elm-color/latest/) `Color.Color`
- `hex` - The color as a hex string
- `rgb` - The color as an RGB triple
- `hasColor` - A boolean indicating whether the language has a color on Github, or if it's been defaulted to "#ccc"

The `elmui` and `color` fields are provided for convenience, but you can also use the `hex` and `rgb` fields to construct your own color values."""

        colorDeclarations =
            List.map generateColor files
    in
    [ Elm.fileWith [ "GithubColors" ]
        { docs = \l -> topLevelDoc :: List.map Elm.docs l
        , aliases = []
        }
        (colorTypeDeclaration :: colorDeclarations)
    ]


topLevelDoc : String
topLevelDoc =
        """This module exposes the color values for all supported languages on Github. Color data is taken from [ozh/github-colors](https://github.com/ozh/github-colors).

**NOTE:** This is an autogenerated file using [mdgriffith/elm-codegen](https://github.com/mdgriffith/elm-codegen). 
"""


colorType : Type.Annotation
colorType =
    Type.record
        [ ( "elmui", Gen.Element.annotation_.color )
        , ( "color", Gen.Color.annotation_.color )
        , ( "hex", Type.string )
        , ( "rgb", Type.triple Type.int Type.int Type.int )
        , ( "hasColor", Type.bool )
        ]


generateColor : WithProcessed (WithName FlagColor) -> Elm.Declaration
generateColor color =
    let
        ( r, g, b ) =
            color.processed.rgb
    in
    Elm.declaration color.processed.name
        (Elm.record
            [ ( "elmui", Gen.Element.rgb255 r g b )
            , ( "color", Gen.Color.rgb255 r g b )
            , ( "hex", Elm.string color.processed.hex )
            , ( "rgb", Elm.triple (Elm.int r) (Elm.int g) (Elm.int b) )
            , ( "hasColor", Elm.bool <| Util.isJust color.color )
            ]
            |> Elm.withType (Type.alias [] "Color" [] Type.string)
        )
        |> Elm.withDocumentation ("Github language color for '" ++ color.name ++ "'")
        |> Elm.exposeWith
            { exposeConstructor = False
            , group = Just "Language Colors"
            }
