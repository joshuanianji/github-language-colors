module Generate exposing (main)

{-| Generate src/GithuhbColors.elm
-}

import Elm
import Elm.Annotation as Type
import Flags exposing (Flag, FlagColor, WithName, WithProcessed)
import Gen.CodeGen.Generate as Generate
import Gen.Color
import Gen.Element
import Json.Decode exposing (Value)
import Util
import Gen.Dict
import Elm.Case 


main : Program Value () ()
main =
    Generate.fromJson Flags.decoder generate


generate : Flag -> List Elm.File
generate flag =
    let
        colorTypeDeclaration =
            Elm.alias "Color" colorTypeRecord
                |> Elm.exposeWith
                    { exposeConstructor = False
                    , group = Just "Color Type"
                    }
                |> Elm.withDocumentation
                    """Each color exposes the following fields:
- `elmui` - The color as an [elm-ui](https://package.elm-lang.org/packages/mdgriffith/elm-ui/latest/) `Element.Color`
- `color` - The color as an [elm-color](https://package.elm-lang.org/packages/avh4/elm-color/latest/) `Color.Color`
- `hex` - The color as a hex string
- `rgb` - The color as an RGB triple
- `hasColor` - A boolean indicating whether the language has a color on Github, or if it's been defaulted to "#ccc"

The `elmui` and `color` fields are provided for convenience, but you can also use the `hex` and `rgb` fields to construct your own color values."""

        colorDeclarations =
            List.map generateColorDecl flag
    in
    [ Elm.fileWith [ "GithubColors" ]
        { docs = \l -> topLevelDoc :: List.map Elm.docs l
        , aliases = []
        }
        (colorTypeDeclaration 
            :: (generateLanguageType flag) 
            :: (generateFromString flag)
            :: (generateToString flag)
            :: (generateToColor flag)
            :: colorDeclarations)
    ]



-- This is added above the generated documentation


topLevelDoc : String
topLevelDoc =
    """This module exposes the color values for all supported languages on Github. Color data is taken from [ozh/github-colors](https://github.com/ozh/github-colors).

**NOTE:** This is an autogenerated file using [mdgriffith/elm-codegen](https://github.com/mdgriffith/elm-codegen). 
"""


colorTypeRecord : Type.Annotation
colorTypeRecord =
    Type.record
        [ ( "elmui", Gen.Element.annotation_.color )
        , ( "color", Gen.Color.annotation_.color )
        , ( "hex", Type.string )
        , ( "rgb", Type.triple Type.int Type.int Type.int )
        , ( "hasColor", Type.bool )
        ]


generateLanguageType : Flag -> Elm.Declaration
generateLanguageType colors =   
    List.map (\c -> Elm.variant c.processed.capitalizedName) colors
        |> Elm.customType "Language"
        |> Elm.withDocumentation ("A type representing all supported languages on Github.")
        |> Elm.exposeWith 
            { exposeConstructor = True 
            , group = Just "Language"
            }


generateToString : Flag -> Elm.Declaration
generateToString colors = 
    let
        cases = 
            List.map 
                (\c -> 
                    Elm.Case.branch0
                        c.processed.capitalizedName
                        (Elm.string c.name)
                )
                colors
    in 
    Elm.fn ("Language", Just languageType) 
        (\firstArg ->
            Elm.Case.custom firstArg 
                languageType
                cases
        )
        |> Elm.declaration "toString"
        |> Elm.withDocumentation ("Converts a `Language` value to its name")
        |> Elm.exposeWith 
            { exposeConstructor = False
            , group = Just "Language Colors"
            }


-- String -> Maybe Language
generateFromString : Flag -> Elm.Declaration
generateFromString colors =
    let
        cases = 
            List.map 
                (\c -> 
                    ( c.name
                    , Elm.just (Elm.value { importFrom = [], name = c.processed.capitalizedName, annotation = Just languageType})
                    )
                )
                colors
    in 
    Elm.fn ("String", Just Type.string) 
        (\firstArg ->
            Elm.Case.string firstArg
                { cases = cases 
                , otherwise = Elm.nothing
                } 
        )
        |> Elm.declaration "fromString"
        |> Elm.withDocumentation ("Converts a language name to a `Maybe Language` value. For example, \"C++\" -> `Just Lang_Cpp`")
        |> Elm.exposeWith 
            { exposeConstructor = False
            , group = Just "Language Colors"
            }


generateColorDecl : WithProcessed (WithName FlagColor) -> Elm.Declaration
generateColorDecl color =
    let
        ( r, g, b ) =
            color.processed.rgb
    in
    Elm.declaration color.processed.name
        (Elm.record
            [ ( "elmui", Gen.Element.rgb255 r g b )
            , ( "color", Gen.Color.rgb255 r g b )
            , ( "hex", Elm.string color.processed.hex )
            , ( "rgb", Elm.triple (Elm.int r) (Elm.int g) (Elm.int b) )
            , ( "hasColor", Elm.bool <| Util.isJust color.color )
            ]
            |> Elm.withType colorType
        )
        |> Elm.withDocumentation ("Github language color for '" ++ color.name ++ "'")
        |> Elm.exposeWith
            { exposeConstructor = False
            , group = Just "Language Colors"
            }


generateToColor : Flag -> Elm.Declaration
generateToColor colors =
    let 
        cases = 
            List.map 
                (\c -> 
                    Elm.Case.branch0
                        c.processed.capitalizedName
                        (Elm.val c.processed.name)
                )
                colors
    in 
    Elm.fn ("Language", Nothing) 
        (\firstArg ->
            Elm.Case.custom firstArg 
                colorType
                cases
        )
        |> Elm.withType (Type.function [languageType] colorType)
        |> Elm.declaration "toColor"
        |> Elm.withDocumentation ("Converts a `Language` value to its name")
        |> Elm.exposeWith 
            { exposeConstructor = False
            , group = Just "Language Colors"
            }


languageType : Type.Annotation 
languageType = 
    Type.alias [] "Language" [] Type.string


colorType : Type.Annotation
colorType = 
    Type.alias [] "Color" [] colorTypeRecord
